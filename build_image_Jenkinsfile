pipeline{
    agent any
    stages{
        stage('Build images'){
            steps{
                sh 'docker-compose build'
            }
        }
        stage('Run Containers'){
            steps{
                sh 'docker-compose up -d'
            }
        }
        stage('Test services'){
            steps{
                echo 'nothing!'
                //write checking script
            }
        }
        stage('Push images to registry'){
            steps{
                sh 'docker tag backend_build_back:latest registry.hiriko.local:5000/back:${BUILD_NUMBER}'
                sh 'docker push registry.hiriko.local:5000/back:${BUILD_NUMBER}'
                sh 'docker tag backend_build_db_postgre:latest registry.hiriko.local:5000/db_postgre:${BUILD_NUMBER}'
                sh 'docker push registry.hiriko.local:5000/db_postgre:${BUILD_NUMBER}'
            }
        }
        stage('Stop docker images'){
            steps{
                sh 'docker stop $(docker ps -aq) '
                sh 'docker rm $(docker ps -aq) '
                sh 'docker network prune -f'
                sh 'docker rmi -f $(docker images --filter dangling=true -qa)'
                //sh 'docker volume rm $(docker volume ls --filter dangling=true -q)'
                sh 'docker rmi -f $(docker images -qa)'
            }
        }
    }
    post{
        always{
            cleanWs()
        }
        success{
            build job: 'Deploy' , parameters: [string(name: 'TAG_BACK', value: "${env.BUILD_NUMBER}")] , propagate: true
        }
    }
}