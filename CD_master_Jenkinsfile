pipeline{
    agent { label 'Deploy'}
options {
    disableConcurrentBuilds()
    buildDiscarder(logRotator(artifactDaysToKeepStr: '', artifactNumToKeepStr: '', daysToKeepStr: '', numToKeepStr: '5'))
}
parameters{
    string(description: 'backend image version', name: 'TAG_BACK')
    }
    stages{
        stage('Pull image from registry') {
            steps {
                sh 'docker pull registry.hiriko.local:5000/back:${TAG_BACK}'
                sh 'docker pull registry.hiriko.local:5000/postgres:11.2-alpine'
            }
        }
        stage('Stop running containers') {
            steps {
                sh 'docker container rm -f backend'
                sh 'docker container rm -f db_postgre'
            }
        }
        stage('RUN SERVICES') {
            steps {
                sh 'docker-compose -f Prod.backend.yml up -d'
            }
        }
        stage('Test service'){
            options{
                timeout( time: 2 , unit: "MINUTES")
            }
            steps{
                sh 'bash check_service.sh'
            }
        }
    }
    post { 
        always { 
            cleanWs()
        }
        aborted {
            slackSend  (channel: '#builds' , color: "#f0f5f5", message: "Build aborted: ${env.JOB_NAME} ${env.BUILD_NUMBER}")   
        }
        success{
            slackSend  (channel: '#builds' , color: "#11f719", message: "Build successed: ${env.JOB_NAME} ${env.BUILD_NUMBER}")
        }
        failure{
            slackSend  (channel: '#builds' , color: "#f5330c", message: "Build failed: ${env.JOB_NAME} ${env.BUILD_NUMBER}")
        }
    }
    
}